// Espera o DOM carregar completamente
document.addEventListener('DOMContentLoaded', function() {
    // Adiciona event listeners para as caixas de presente (poemas)
    const giftBoxes = document.querySelectorAll('.gift-box');
    giftBoxes.forEach(box => {
        box.addEventListener('click', function() {
            toggleGiftBox(this);
        });
    });

    // Adiciona event listeners para as fotos da galeria
    const photoItems = document.querySelectorAll('.photo-item');
    photoItems.forEach(item => {
        item.addEventListener('click', function() {
            openModal(this);
        });
    });

    // Fecha modal ao clicar no X
    const closeBtn = document.querySelector('.close');
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            closeModal();
        });
    }

    // Fecha modal ao clicar fora dele
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('photoModal');
        if (event.target === modal) {
            closeModal();
        }
    });

    // Efeito parallax sutil nos cora√ß√µes decorativos fixos ao rolar a p√°gina
    window.addEventListener('scroll', function() {
        const scrolled = window.pageYOffset;
        const hearts = document.querySelectorAll('.heart-decoration');
        hearts.forEach(heart => {
            const speed = 0.3; // Movimento sutil
            heart.style.transform = `translateY(${scrolled * speed}px)`;
        });
    });

    console.log('Site rom√¢ntico para Al√≠cia carregado com sucesso! üíñ Clique nas caixas para testar.');
});

// Fun√ß√£o para abrir/fechar as caixas de presente
function toggleGiftBox(box) {
    // Alterna a classe 'open' para anima√ß√£o CSS
    box.classList.toggle('open');
    
    if (box.classList.contains('open')) {
        // Ao abrir: Mostra o conte√∫do com anima√ß√£o e cria cora√ß√µes voando
        const content = box.querySelector('.gift-content');
        if (content) {
            content.style.opacity = '1';
            content.style.transform = 'scale(1) rotateY(0deg)';
        }
        
        // Cria os cora√ß√µes voando da posi√ß√£o da caixa
        createFlyingHearts(box);
    } else {
        // Ao fechar: Esconde o conte√∫do com anima√ß√£o
        const content = box.querySelector('.gift-content');
        if (content) {
            content.style.opacity = '0';
            content.style.transform = 'scale(0.8) rotateY(90deg)';
        }
    }
}

// Fun√ß√£o para criar cora√ß√µes voando (explos√£o rom√¢ntica: 8 cora√ß√µes sobem girando)
function createFlyingHearts(box) {
    // Pega a posi√ß√£o real da caixa na tela
    const rect = box.getBoundingClientRect();
    const heartTypes = ['‚ù§', 'üíï', 'üíñ', 'üíó', 'üíì', 'üíî']; // Varia√ß√µes de emojis
    
    // Cria 8 cora√ß√µes
    for (let i = 0; i < 8; i++) {
        // Cria o elemento div para o cora√ß√£o
        const heart = document.createElement('div');
        heart.className = 'flying-heart';
        heart.innerHTML = heartTypes[Math.floor(Math.random() * heartTypes.length)];
        
        // Posi√ß√£o inicial aleat√≥ria dentro da caixa
        heart.style.left = (rect.left + Math.random() * rect.width) + 'px';
        heart.style.top = (rect.top + Math.random() * rect.height) + 'px';
        
        // Estilos aleat√≥rios para variedade (tamanho, dura√ß√£o, delay)
        heart.style.fontSize = (1 + Math.random() * 1) + 'em'; // Tamanho entre 1-2em
        heart.style.animationDuration = (3 + Math.random() * 4) + 's'; // Dura√ß√£o 3-7s
        heart.style.animationDelay = (Math.random() * 0.5) + 's'; // Delay pequeno
        
        // Adiciona o cora√ß√£o ao body (para posicionamento fixed)
        document.body.appendChild(heart);
        
        // Remove o cora√ß√£o ap√≥s a anima√ß√£o terminar (limpeza para performance)
        setTimeout(() => {
            if (heart.parentNode) {
                heart.parentNode.removeChild(heart);
            }
        }, 7000); // Dura√ß√£o max + buffer de 1s
    }
}

// Fun√ß√£o para abrir o modal da foto
function openModal(photoItem) {
    const modal = document.getElementById('photoModal');
    const modalImg = document.getElementById('modalImg');
    const img = photoItem.querySelector('.gallery-photo');
    
    if (!modal || !modalImg || !img) return; // Evita erros se elementos n√£o existirem
    
    // Mostra o modal
    modal.style.display = 'block';
    modalImg.src = img.src;
    modalImg.alt = img.alt;
    
    // Cria 6 cora√ß√µes orbitando ao redor da foto no modal
    const modalHearts = modal.querySelector('.modal-hearts');
    if (modalHearts) {
        modalHearts.innerHTML = ''; // Limpa cora√ß√µes anteriores
        for (let i = 0; i < 6; i++) {
            const heart = document.createElement('div');
            heart.className = 'modal-heart';
            heart.innerHTML = ['üíñ', 'üíï', '‚ù§'][Math.floor(Math.random() * 3)]; // Varia√ß√£o
            heart.style.left = Math.random() * 100 + '%';
            heart.style.top = Math.random() * 100 + '%';
            heart.style.animationDelay = (Math.random() * 3) + 's'; // Delay aleat√≥rio
            modalHearts.appendChild(heart);
        }
    }
}

// Fun√ß√£o para fechar o modal
function closeModal() {
    const modal = document.getElementById('photoModal');
    if (modal) {
        modal.style.display = 'none';
    }
}